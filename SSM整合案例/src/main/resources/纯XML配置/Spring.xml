<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--除控制层(controller)以外交由Spring处理-->
    <context:component-scan base-package="localhost">
        <!--通过注解排除对@Controller注解的扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入properties文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--开启事务的注解驱动
           将使用注解@Transactional标识的方法或类中所以的方法进行事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置SqlSessionFactoryBean可以直接在Spring的IoC中获取SqlSessionFactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置MyBatis的核心配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--引用数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--设置类型别名所对应的包-->
        <property name="typeAliasesPackage" value="localhost.pojo"/>
        <!--设置映射文件的路径; 只有映射文件的包和mapper接口的包不一致时才需要设置
	        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        -->
        <!--配置插件
        <property name="plugins">
			<array>
		        &lt;!&ndash;配置分页插件&ndash;&gt;
		        <bean class="com.github.pagehelper.PageInterceptor"/>
		    </array>
		</property>-->
    </bean>

    <!--配置mapper接口的扫描,可以将指定包下所有的mapper接口,
	    通过SqlSession创建代理实现类对象, 并将这些对象交给IoC容器管理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="localhost.mapper"/>
    </bean>

</beans>